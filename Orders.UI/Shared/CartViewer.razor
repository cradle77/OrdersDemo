@inject Orders.UI.Services.CartService CartService
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.SignalR.Client
@implements IDisposable

<h3>CartViewer</h3>

<div class="nav-item cart px-3 container">
    @if (_cart == null || _cart.Items.Count == 0)
    {
        <p><em>Your cart is empty..</em></p>
    }
    else
    {
        @foreach (var item in _cart.Items)
        {
            <div class="row">
                <div class="col-1">@item.Quantity</div>
                <div class="col-7">@item.Product.Name</div>
                <div class="col-2">@string.Format("{0:c}", item.Amount)</div>
            </div>
        }
    }
    <div class="row total">
        <div class="col-8">Total:</div>
        <div class="col-2">@string.Format("{0:c}", (_cart?.TotalAmount).GetValueOrDefault())</div>
    </div>
    <div class="row">
        <div class="col-6 align-content-md-start" style="padding:0">
            <BusyButton class="btn btn-primary" OnClick="this.CartService.DispatchCartAsync">Order!</BusyButton>
        </div>
        <div class="col-6 align-content-md-end" style="padding:0">
            <BusyButton class="btn btn-danger" OnClick="this.CartService.EmptyCartAsync">Empty!</BusyButton>
        </div>
    </div>
</div>

@code {
    private HubConnection hubConnection;
    private Cart _cart;

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        hubConnection = new HubConnectionBuilder()
        .WithUrl("http://127.0.0.1:7071/api/", options =>
        {
            // note: test only, do not use in production
            options.Headers.Add("x-ms-client-principal-id", "testUser");
        })
        .Build();

        hubConnection.On("cartUpdated", () => this.Refresh(null, EventArgs.Empty));

        await hubConnection.StartAsync();

        await this.LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        _cart = await this.CartService.GetCart();
    }

    private async void Refresh(object sender, EventArgs e)
    {
        await this.LoadDataAsync();

        this.StateHasChanged();
    }

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }
}
