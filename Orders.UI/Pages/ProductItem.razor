@inject IConfiguration  Configuration
@inject Orders.UI.Services.CartService CartService

<!-- Custom content-->
<div class="media align-items-lg-center flex-column flex-lg-row p-3">
    <div class="media-body order-2 order-lg-1">
        <h5 class="mt-0 font-weight-bold mb-2">@this.Product.Name</h5>
        <p class="font-italic text-muted mb-0 small">@this.Product.Description</p>
        <div class="d-flex align-items-center justify-content-between mt-1">
            <h6 class="font-weight-bold my-2">@string.Format("{0:c}", this.Product.Cost)</h6>
            <ul class="list-inline small">
                <li class="list-inline-item m-0"><i class="fa fa-star text-success"></i></li>
                <li class="list-inline-item m-0"><i class="fa fa-star text-success"></i></li>
                <li class="list-inline-item m-0"><i class="fa fa-star text-success"></i></li>
                <li class="list-inline-item m-0"><i class="fa fa-star text-success"></i></li>
                <li class="list-inline-item m-0"><i class="fa fa-star-o text-gray"></i></li>
            </ul>
        </div>
        <button class="btn btn-primary" @onclick="@(async e => await this.CartService.AddProductToCartAsync(this.Product))">Add to cart</button>
    </div><img src="@GetImageUrl(this.Product.ImageUrl)" alt="Generic placeholder image" width="200" class="ml-lg-5 order-1 order-lg-2">
</div> <!-- End -->

@code {
    [Parameter]
    public Product Product { get; set; }


    private string GetImageUrl(string imageUrl)
    {
        return string.Concat(this.Configuration["BaseAssetsUrl"], imageUrl);
    }
}
